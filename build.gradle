buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}")
        classpath "org.springframework:springloaded:${project.springBootVersion}"
        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.3'
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'watch'


applicationName = 'cloud-config'

sourceCompatibility = project.javaVersion
targetCompatibility = project.javaVersion

jar {
    baseName = 'cloud-config'
    version =  '0.0.1-SNAPSHOT'
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compile 'commons-collections:commons-collections:3.2'
    compile 'com.amazonaws:aws-java-sdk:1.9.5'
    compile("org.springframework.boot:spring-boot-starter-web:${project.springBootVersion}") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile "org.springframework.boot:spring-boot-starter-jetty:${project.springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${project.springBootVersion}"
    compile "com.domingosuarez.boot:spring-boot-starter-jade4j:0.2"

    compile 'org.webjars:bootstrap:3.2.0'
    compile 'org.webjars:font-awesome:4.2.0'

    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'commons-cli:commons-cli:1.2'
    compile 'cglib:cglib:3.0'
    compile 'javax.json:javax.json-api:1.0'

    runtime 'org.glassfish:javax.json:1.0.4'

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

mainClassName = "com.sciul.cloud_configurator.Application"

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

run {
    if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}

watch {
    resources {
        files files('src/main/resources')
        tasks 'processResources'
    }
}
